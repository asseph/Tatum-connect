{
  "swagger": "2.0",
  "info": {
    "description": "REST API documentation for Tatum Middleware. Tatum Middleware is a client to Tatum Blockchain API Core.",
    "version": "1.0.2",
    "title": "Tatum Middleware API"
  },
  "host": "localhost:6543",
  "basePath": "\/",
  "tags": [
    {
      "name": "JWT helper Endpoint",
      "description": "Endpoint used to create valid JWT authorization bearer token from your API key."
    },
    {
      "name": "Settings Endpoint",
      "description": "Endpoint used to add / remove API keys."
    },
    {
      "name": "Customer Endpoint",
      "description": "<p>Prerequisites: <br/><ul><li><a href=\"#tatum-middleware-api-jwt-helper-endpoint\">JWT helper Endpoint</a></li></ul></p><p>Endpoint used to handle customer operations, like creating new one, update information about customer, enable/disable. Within Tatum API, customer represents client of your organization.</p>"
    },
    {
      "name": "Bitcoin blockchain helper Endpoint",
      "description": "<p>Prerequisites: <br/><ul><li><a href=\"#tatum-middleware-api-customer-endpoint\">Customer Endpoint</a></li></ul></p><p>Operations with Bitcoin blockchain, such as wallet generation or sending transactions to blockchain. Tatum supports 2 chains - Mainnet, which is regular live chain, and Testnet3, which is test chain used for test purposes. Coins on test chain have no value and can be obtained from Faucet, e.g. <a href=\"https://coinfaucet.eu/en/btc-testnet/\">https://coinfaucet.eu/en/btc-testnet/</a>.<br/>In order to start using Bitcoin blockchain, first we need to create a wallet. At Tatum, we support BIP44 HD wallets. It is very convenient, since we can generate 2^32-1 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 12 special words in defined order, from which we can restore access to all addresses and private keys generated from it.<br/>Each address is identified by 3 main values:<ul><li>Private Key - your secret value, which should never be revealed</li><li>Public Key - public address to be published</li><li>Derivation index - index of generated address</li></ul></p><p>Tatum follows BIP44 specification and generates for Bitcoin wallet with derivation path m'/44'/0'/0'/0. More about BIP44 HD wallets can be found here - <a href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\">https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki</a>.</p>"
    },
    {
      "name": "Ethereum blockchain helper Endpoint",
      "description": "<p>Prerequisites: <br/><ul><li><a href=\"#tatum-middleware-api-customer-endpoint\">Customer Endpoint</a></li></ul></p><p>Operations with Bitcoin blockchain, such as wallet generation or sending transactions to blockchain. Tatum supports 2 chains - Mainnet, which is regular live chain, and Ropsten, which is test chain used for test purposes. Coins on test chain have no value and can be obtained from Faucet, e.g. <a href=\"https://faucet.ropsten.be/\">https://faucet.ropsten.be/</a>.<br/>In order to start using Ethereum blockchain, first we need to create a wallet. At Tatum, we support BIP44 HD wallets. It is very convenient, since we can generate 2^32-1 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 12 special words in defined order, from which we can restore access to all accounts and private keys generated from it.<br/>Each account is identified by 3 main values:<ul><li>Private Key - your secret value, which should never be revealed</li><li>Public Key - public address to be published</li><li>Derivation index - index of generated address</li></ul></p><p>Tatum follows BIP44 specification and generates for Ethereum wallet with derivation path m'/44'/60'/0'/0. More about BIP44 HD wallets can be found here - <a href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\">https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki</a>.</p>"
    },
    {
      "name": "XRP blockchain helper Endpoint",
      "description": "<p>Prerequisites: <br/><ul><li><a href=\"#tatum-middleware-api-customer-endpoint\">Customer Endpoint</a></li></ul></p><p>Operations with XRP blockchain, such as account generation or sending transactions to blockchain. Tatum supports 2 chains - Mainnet, which is regular live chain, and Test chain, which is used for test purposes. Coins on test chain have no value and can be obtained from Faucet, e.g. <a href=\"https://developers.ripple.com/xrp-test-net-faucet.html\">https://developers.ripple.com/xrp-test-net-faucet.html</a>.<br/>In order to start using XRP blockchain, first we need to create and XRP account. In XRP, same account is used for Mainnet and Test chain. In order to have account activated, it must be credited with 20 XRP. Because of this obstacle, it is common to use 1 account for all customers and distinguish them via Destination tags. At Tatum, when we create deposit address for account, we generate deposit tag for the same account.</p>"
    },
    {
      "name": "Account Endpoint",
      "description": "<p>Prerequisites: <br/><ul><li><a href=\"#tatum-middleware-api-bitcoin-blockchain-helper-endpoint\">Bitcoin blockchain helper Endpoint</a></li><li><a href=\"#tatum-middleware-api-ethereum-blockchain-helper-endpoint\">Ethereum blockchain helper Endpoint</a></li><li><a href=\"#tatum-middleware-api-xrp-blockchain-helper-endpoint\">XRP blockchain helper Endpoint</a></li></ul></p><p>Endpoint to handle operations on Tatum accounts, list accounts belonging to defined customer, generate blockchain addresses and link them to accounts. <br/>There are 2 main concepts within Tatum:<ul><li>Tatum account with no blockchain address generated - account generated for given currency such as BTC, but without blockchain address associated with it. Customer can send and receive funds with this account inside Tatum's private ledger, but it is impossible to receive fund from blockchain ledger. But it is possible to send funds to blockchain addresses.</li><li>Tatum account with generated blockchain address - customer is able to use Tatum's private ledger transactions, send funds to blockchain addresses as well as receive funds fomr blockchain users.</li></ul></p>"
    },
    {
      "name": "Virtual Currency Endpoint",
      "description": "<p>Prerequisites: <br/><ul><li><a href=\"#tatum-middleware-api-account-endpoint\">Account Endpoint</a></li></ul></p><p>Register and use Tatum private's virtual currencies. You can create your own virtual currency and distribute it amongst your customers.</p>"
    },
    {
      "name": "Payment Endpoint",
      "description": "<p>Prerequisites: <br/><ul><li><a href=\"#tatum-middleware-api-account-endpoint\">Account Endpoint</a></li></ul></p><p>Endpoint used to create and list transactions within Tatum private's ledger.</p>"
    },
    {
      "name": "Withdrawal Endpoint",
      "description": "<p>Prerequisites: <br/><ul><li><a href=\"#tatum-middleware-api-account-endpoint\">Account Endpoint</a></li></ul></p><p>Endpoint used to cancel / complete withdrawals from Tatum to supported blockchains made by your customers.</p>"
    },
    {
      "name": "ERC20 Endpoint",
      "description": "<p>Prerequisites: <br/><ul><li><a href=\"#tatum-middleware-api-ethereum-blockchain-helper-endpoint\">Ethereum blockchain helper Endpoint</a></li></li><li><a href=\"#tatum-middleware-api-withdrawal-endpoint\">Withdrawal Endpoint</a></li></ul></p><p>Erc 20 Token Endpoint is used to create new ERC20 token in Ethereum blockchain and register it within Tatum. Then you will be able to send and receive created ERC20 tokens as you would with Ethereum or any other crypto asset.</p>"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "\/api\/v1\/account": {
      "post": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "Create new account",
        "description": "<p>Creates new account for the customer. This will create account on Tatum's private ledger. It will not create any blockchain address, so customer is unable to receive funds from outside of Tatum. It is possible to create account for every supported crypto currency as well as any ERC20 token created within Tatum instance and Tatum virtual currencies.</p>",
        "operationId": "createAccount",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "account",
            "description": "account",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/CreateAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/detail\/{id}": {
      "get": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "Get account by ID",
        "description": "<p>Get account by ID. Display all information regarding given account.</p>",
        "operationId": "getAccountByPublicId",
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Account"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/qr\/{currency}\/{address}": {
      "get": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "Generate QR code",
        "description": "Creates QR code for given currency and address.",
        "operationId": "getQRCode",
        "produces": [
          "image\/png"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Blockchain address",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "description": "Digital asset",
            "required": true,
            "type": "string",
            "enum": [
              "BTC",
              "TBTC",
              "ETH",
              "TETH"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/{customerId}": {
      "get": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "List all customer accounts",
        "description": "<p>List all accounts associated with the customer.</p>",
        "operationId": "getAccountsByCustomerId",
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Internal customer ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Account"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/{id}\/address": {
      "get": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "Get all deposit addresses for account",
        "description": "<p>Get all deposit addresses generated for account. It is possible to deposit funds from another blockchain address to any of associated addresses.</p>",
        "operationId": "getAllDepositAddresses",
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Address"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/{id}\/address\/{xpub}": {
      "post": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "Create new deposit address",
        "description": "<p>Create new deposit address for account. This method associate public blockchain's ledger address with account of Tatum's private ledger. Depending on currency of account, this method will either generate public address for Bitcoin or Ethereum, or DestinationTag in case of XRP.</p>",
        "operationId": "generateDepositAddress",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "index",
            "in": "query",
            "description": "<p>Derivation path index for concrete address. If not present, last used index for given xpub + 1 is used. We recommend not to pass this value manually, since when some of hte indexes are skipped, it is not possible to use them lately to generate address from it.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "xpub",
            "in": "path",
            "description": "<p>Extended public key to derive address from. There can be only 1 across all accounts and all accounts are generated from it. In case of XRP, this is Account address for which there will be generated DestinationTags. 0 indexed address is not used and is used for internal purposes (in case of BTC to ask for change for each blockchain transaction).</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Address"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/{id}\/balance": {
      "get": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "Get account balance",
        "description": "Get balance for the account.",
        "operationId": "getAccountBalance",
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/AccountBalance"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/{id}\/block": {
      "put": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": " Block amount on account",
        "description": "<p>Blocked amount affects account available balance and does not allow to go with balance under the blocked amount.</p>",
        "operationId": "blockAmount",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "amount",
            "description": "amount",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/BlockAmount"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/{id}\/deactivate": {
      "put": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "Deactivate account",
        "description": "<p>Deactivate account. Only accounts with non-zero balance can be deactivated.</p>",
        "operationId": "deactivateAccount",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/{id}\/freeze": {
      "put": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "Freeze account",
        "description": "<p>Freeze account will disable all outgoing payments. Deposits on account will remain available.</p>",
        "operationId": "freezeAccount",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/account\/{id}\/unfreeze": {
      "put": {
        "tags": [
          "Account Endpoint"
        ],
        "summary": "Unfreeze account",
        "description": "<p>Unfreeze previously frozen account. Unfreezing non-frozen account will do no harm to the account.</p>",
        "operationId": "unfreezeAccount",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/customer": {
      "get": {
        "tags": [
          "Customer Endpoint"
        ],
        "summary": "List all customers",
        "description": "<p>List of all customers. Please limit calls as much as possible, especially if you have more customers.</p>",
        "operationId": "findAll",
        "produces": [
          "application\/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Customer"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer Endpoint"
        ],
        "summary": "Create new customer",
        "description": "<p>Create new customer. Customer represents customer within your organization, for who you want to create account. Every customer can have unlimited accounts. In order to create accounts and connect them to blockchain addresses, customer must be created.</p>",
        "operationId": "createCustomer",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "customer",
            "description": "customer",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/CustomerRegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/customer\/{externalId}": {
      "get": {
        "tags": [
          "Customer Endpoint"
        ],
        "summary": "Get customer details",
        "description": "<p>Using anonymized external ID you can access customer detail information including internal ID. Internal ID is needed to call other customer related methods.</p>",
        "operationId": "getCustomerByExternalId",
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "name": "externalId",
            "in": "path",
            "description": "Customer external ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Customer"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/customer\/{id}": {
      "put": {
        "tags": [
          "Customer Endpoint"
        ],
        "summary": "Update customer",
        "description": "<p>This method is helpful in case your primary system will change ID's or customer will change the country he\/she is supposed to be in compliance with.</p>",
        "operationId": "updateCustomer",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "customer",
            "description": "customer",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/CustomerUpdate"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Customer internal ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/customer\/{id}\/deactivate": {
      "put": {
        "tags": [
          "Customer Endpoint"
        ],
        "summary": "Deactivate customer",
        "description": "<p>Deactivate customer is not able to do any operation. Customer can be deactivated only when all their accounts are already deactivated.</p>",
        "operationId": "deactivateCustomer",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer internal ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/customer\/{id}\/disable": {
      "put": {
        "tags": [
          "Customer Endpoint"
        ],
        "summary": "Disable customer",
        "description": "<p>Disabled customer cannot perform end-user operations, such as create new accounts or send payments. Available balance on all accounts is set to 0. Account balance will stay untouched.</p>",
        "operationId": "disableCustomer",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer internal ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/customer\/{id}\/enable": {
      "put": {
        "tags": [
          "Customer Endpoint"
        ],
        "summary": "Enable customer",
        "description": "<p>Enabled customer can perform all operations. By default all customers are enabled.</p>",
        "operationId": "enableCustomer",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer internal ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/erc20\/{id}": {
      "post": {
        "tags": [
          "ERC20 Endpoint"
        ],
        "summary": "Create new ERC20 token",
        "description": "<p>Create new ERC20 token with given supply on Ethereum blockchain. Whole supply of newly created ERC20 token is stored in customer's newly created account. Then it is possible to create new Tatum accounts with ERC20 token name as account's currency.</p>",
        "operationId": "createErc20Currency",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "erc20",
            "description": "erc20",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/Erc20"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Customer internal ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Erc20Response"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/erc20\/{symbol}\/{address}": {
      "post": {
        "tags": [
          "ERC20 Endpoint"
        ],
        "summary": "Set ERC20 token contract address",
        "description": "<p>Set contract address of ERC20 token. This must be done in order to communicate with ERC20 smart contract. After creating and deploying ERC20 token to Ethereum blockchain, smart contract address is generated and must be set within Tatum. Otherwise Tatum platform will not be able to detect incoming deposits of ERC20 and do withdrawals from Tatum accounts to other blockchain addresses.</p>",
        "operationId": "storeErc20ContractAddress",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "ERC20 contract address",
            "required": true,
            "type": "string"
          },
          {
            "name": "symbol",
            "in": "path",
            "description": "ERC20 symbol name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/payment": {
      "post": {
        "tags": [
          "Payment Endpoint"
        ],
        "summary": "Send payment",
        "description": "<p>Send payment within the Tatum's ledger. All assets are settled instantly. This method is used only for transferring assets between Tatum's accounts and will not send any funds to blockchain addresses.</p>",
        "operationId": "sendPayment",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payment",
            "description": "payment",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/Payment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/payment\/account\/{id}": {
      "post": {
        "tags": [
          "Payment Endpoint"
        ],
        "summary": "Find payments for account.",
        "description": "<p>Find payments for account identified by given id.</p>",
        "operationId": "getTransactionsByAccountId",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "filter",
            "description": "filter",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/TransactionFilter"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Transaction"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/payment\/customer\/{id}": {
      "post": {
        "tags": [
          "Payment Endpoint"
        ],
        "summary": "Find payments for customer across all accounts.",
        "description": "<p>Find payments for all accounts of customer identified by given id.</p>",
        "operationId": "getTransactionsByCustomerId",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "filter",
            "description": "filter",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/TransactionFilter"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Internal customer ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Transaction"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/settings\/key": {
      "post": {
        "tags": [
          "Settings Endpoint"
        ],
        "summary": "Create new API key",
        "description": "<p>Create new API key. It is possible to set read/write permissions. Read permission is always set. Read permission allows any non-modifying operation such as list accounts, transactions, but it is not possible to create transaction or activate account.</p>",
        "operationId": "addApiKey",
        "consumes": [
          "application\/json;charset=UTF-8"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "apiKey",
            "description": "apiKey",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/ApiKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/settings\/key\/{id}": {
      "delete": {
        "tags": [
          "Settings Endpoint"
        ],
        "summary": "Remove existing API key",
        "description": "<p>Do not remove last used API key, otherwise you will not be able to use API.</p>",
        "operationId": "removeApiKey",
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of API key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/virtualCurrency\/mint": {
      "put": {
        "tags": [
          "Virtual Currency Endpoint"
        ],
        "summary": "Create new supply of virtual currency",
        "description": "<p>Create new supply of virtual currency linked with given accountId. Method increases total supply of currency.<p>",
        "operationId": "mintCurrency",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "virtualCurrency",
            "description": "virtualCurrency",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/VirtualCurrencyOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/virtualCurrency\/revoke": {
      "put": {
        "tags": [
          "Virtual Currency Endpoint"
        ],
        "summary": "Destroy supply of virtual currency",
        "description": "<p>Destroy supply of virtual currency linked with given accountId. Method decreases total supply of currency.</p>",
        "operationId": "revokeCurrency",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "virtualCurrency",
            "description": "virtualCurrency",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/VirtualCurrencyOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/virtualCurrency\/{id}": {
      "post": {
        "tags": [
          "Virtual Currency Endpoint"
        ],
        "summary": "Create new virtual currency",
        "description": "<p>Create new virtual currency with given supply stored in account. This will create Tatum internal virtual currency. Tatum virtual currency act as any other asset within Tatum. For creation of ERC20 token, see <a href=\"#tatum-middleware-api-erc20-endpoint\">ERC20 Endpoint</a>.</p>",
        "operationId": "createCurrency",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer internal ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "virtualCurrency",
            "description": "virtualCurrency",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/VirtualCurrency"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/withdrawal\/broadcast": {
      "post": {
        "tags": [
          "Withdrawal Endpoint"
        ],
        "summary": "Broadcast signed transaction and complete withdrawal",
        "description": "<p>Broadcast signed raw transaction end complete withdrawal associated with it. When broadcast succeeded but it is impossible to complete withdrawal, transaction id of transaction is returned and withdrawal must be completed manually.</p>",
        "operationId": "broadcast",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "application\/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "broadcast",
            "description": "broadcast",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/Broadcast"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/BroadcastResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/withdrawal\/hint": {
      "post": {
        "tags": [
          "Withdrawal Endpoint"
        ],
        "summary": "Check withdrawal",
        "description": "<p>Check available accounts with enough balance to withdraw desired amount. With Ethereum blockchain, it is possible to withdraw as a 1 transaction only amount, which is available on any of the registered accounts. E.g. we have 3 accounts with balances 0.2 ETH, 0.3 ETH and 0.4 ETH, so maximal available amount to withdraw at 1 transaction is 0.4 ETH. If we want to withdraw more, it must be split into multiple transactions. Only for Ethereum based accounts.</p>",
        "operationId": "checkWithdrawal",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "withdrawal",
            "description": "withdrawal",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WithdrawalHint"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/withdrawal\/{id}": {
      "delete": {
        "tags": [
          "Withdrawal Endpoint"
        ],
        "summary": "Cancel withdrawal",
        "description": "<p>This method is helpful if you need to cancel withdrawal in case of blockchain transaction failed or is not yet processed. This does not cancel already broadcast blockchain transaction, only Tatum internal withdrawal request.</p>",
        "operationId": "cancelWithdrawal",
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of created withdrawal",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/api\/v1\/withdrawal\/{id}\/{txId}": {
      "put": {
        "tags": [
          "Withdrawal Endpoint"
        ],
        "summary": "Complete withdrawal",
        "description": "<p>Invoke complete withdrawal as soon as blockchain transaction ID is available. Otherwise withdrawal will be processed automatically in next block and all other withdrawals will be pending unless the last one is processed and marked as compelted..</p>",
        "operationId": "completeWithdrawal",
        "consumes": [
          "application\/json"
        ],
        "produces": [
          "*\/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of created withdrawal",
            "required": true,
            "type": "string"
          },
          {
            "name": "txId",
            "in": "path",
            "description": "Blockchain transaction ID of created withdrawal",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ],
        "deprecated": false
      }
    },
    "\/util\/v1\/jwt\/{key}\/{secret}": {
      "get": {
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "API Key",
            "required": true,
            "type": "string"
          },
          {
            "name": "secret",
            "in": "path",
            "description": "API Key secret",
            "required": true,
            "type": "string"
          }
        ],
        "operationId": "generateJwt",
        "summary": "Generate JWT token.",
        "description": "<p>Generate valid JWT token from API Key. This token is used to authorize access to Tatum Blockchain API. JWT token is valid only for 30 minutes and it should be renewed ideally with every new request.</p>",
        "tags": [
          "JWT helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "Valid JWT token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/util\/v1\/xrp\/wallet": {
      "post": {
        "summary": "Generate XRP account.",
        "description": "<p>Generate XRP account. 1 common XRP account is used for all customer accounts within Tatum and are distinguished by tag. We can generate as many accounts as we want, but as soon as one is used for address generation, this one will be used for generation of DestinationTag.</p>",
        "operationId": "generateXrpWallet",
        "tags": [
          "XRP blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "Object containing address and secret for generated account.",
            "schema": {
              "$ref": "#\/definitions\/XrpWallet"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/util\/v1\/xrp\/transfer": {
      "post": {
        "parameters": [
          {
            "name": "transfer",
            "in": "body",
            "description": null,
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/XrpTransfer"
            }
          }
        ],
        "operationId": "transferXrp",
        "summary": "Send XRP \/ TXRP from account to account",
        "description": "<p>Send XRP \/ TXRP from account to account. This will create Tatum internal withdrawal request with ID. If every system works as expected, withdrawal request is marked as complete and transaction id is assigned to it.<ul><li>If XRP server connection is unavailable, withdrawal request is cancelled.</li><li>If blockchain transfer is successful, but is it not possible to reach Tatum Blockchain API, transaction id of blockchain transaction is returned and withdrawal request must be completed manually, otherwise all other withdrawals will be pending.</li></ul></p>",
        "tags": [
          "XRP blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "txHash of successful transaction",
            "schema": {
              "$ref": "#\/definitions\/TxHash"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ]
      }
    },
    "\/util\/v1\/btc\/wallet": {
      "post": {
        "parameters": [
          {
            "name": "chain",
            "in": "body",
            "description": "chain - BTC for Mainnet or TBTC for Testnet3",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/WalletGenerateBtc"
            }
          }
        ],
        "operationId": "generateBtcWallet",
        "summary": "Generate wallet.",
        "description": "<p>Generate wallet. This will create BIP44 HD wallet with predefined derivation path and returns mnemonic phrase and extended public and private key to be used for address generation.</p>",
        "tags": [
          "Bitcoin blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "Object containing mnemonic, xpriv and xpub for generated wallet.",
            "schema": {
              "$ref": "#\/definitions\/Wallet"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/util\/v1\/btc\/wallet\/xpub\/{chain}\/{xpub}\/{i}": {
      "get": {
        "parameters": [
          {
            "name": "chain",
            "in": "path",
            "description": "chain - BTC for Mainnet or TBTC for Testnet3",
            "required": true,
            "type": "string",
            "enum": [
              "BTC",
              "TBTC"
            ]
          },
          {
            "name": "xpub",
            "in": "path",
            "description": "xpub to generate address from",
            "required": true,
            "type": "string"
          },
          {
            "name": "i",
            "in": "path",
            "description": "derivation index of address",
            "required": true,
            "type": "integer"
          }
        ],
        "operationId": "calculateBtcAddress",
        "summary": "Calculate BTC address",
        "description": "<p>Calculate address from extended public key on Testnet \/ Mainnet for given derivation path index.</p>",
        "tags": [
          "Bitcoin blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "Generated address",
            "schema": {
              "$ref": "#\/definitions\/GeneratedAddress"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/util\/v1\/btc\/wallet\/xpriv": {
      "post": {
        "parameters": [
          {
            "name": "xpriv",
            "in": "body",
            "description": null,
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/XPrivBtc"
            }
          }
        ],
        "operationId": "calculateBtcPrviKey",
        "summary": "Calculate BTC private key",
        "description": "<p>Calculate private key of address from mnemonic on Testnet \/ Mainnet for given derivation path index.</p>",
        "tags": [
          "Bitcoin blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "Generated private key",
            "schema": {
              "$ref": "#\/definitions\/PrivKey"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/util\/v1\/btc\/withdrawal": {
      "post": {
        "parameters": [
          {
            "name": "transfer",
            "in": "body",
            "description": null,
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/WithdrawalBtc"
            }
          }
        ],
        "operationId": "transferBtc",
        "summary": "Send BTC \/ TBTC from address to address",
        "description": "<p>Send BTC \/ TBTC from address to address. This will create Tatum internal withdrawal request with ID. If every system works as expected, withdrawal request is marked as complete and transaction id is assigned to it.<ul><li>If Bitcoin server connection is unavailable, withdrawal request is cancelled.</li><li>If blockchain transfer is successful, but is it not possible to reach Tatum Blockchain API, transaction id of blockchain transaction is returned and withdrawal request must be completed manually, otherwise all other withdrawals will be pending.</li></ul></p>",
        "tags": [
          "Bitcoin blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "txHash of successful transaction",
            "schema": {
              "$ref": "#\/definitions\/TxHash"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ]
      }
    },
    "\/util\/v1\/eth\/wallet": {
      "post": {
        "parameters": [
          {
            "name": "chain",
            "in": "body",
            "description": "chain - 'mainnet' or 'ropsten'",
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/WalletGenerateEth"
            }
          }
        ],
        "operationId": "generateEthWallet",
        "summary": "Generate ETH wallet.",
        "description": "<p>Generate wallet. This will create BIP44 HD wallet with predefined derivation path and returns mnemonic phrase and extended public and private key to be used for address generation.</p>",
        "tags": [
          "Ethereum blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "Object containing mnemonic, xpriv and xpub for generated wallet.",
            "schema": {
              "$ref": "#\/definitions\/Wallet"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/util\/v1\/eth\/wallet\/xpub\/{pub}\/{i}": {
      "get": {
        "parameters": [
          {
            "name": "pub",
            "in": "path",
            "description": "xpub to generate address from",
            "required": true,
            "type": "string"
          },
          {
            "name": "i",
            "in": "path",
            "description": "derivation index of address",
            "required": true,
            "type": "integer"
          }
        ],
        "operationId": "calculateEthAddress",
        "summary": "Calculate ETH address",
        "description": "<p>Calculate address from xpub on Ropsten \/ Mainnet for given derivation path index.</p>",
        "tags": [
          "Ethereum blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "Generated address",
            "schema": {
              "$ref": "#\/definitions\/GeneratedAddress"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/util\/v1\/eth\/wallet\/xpriv": {
      "post": {
        "parameters": [
          {
            "name": "xpriv",
            "in": "body",
            "description": null,
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/XPrivEth"
            }
          }
        ],
        "operationId": "calculateEthPrivKey",
        "summary": "Calculate private key of ETH address",
        "description": "<p>Calculate private key of address from mnemonic on Ropsten \/ Mainnet for given derivation path index.</p>",
        "tags": [
          "Ethereum blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "Generated private key",
            "schema": {
              "$ref": "#\/definitions\/PrivKey"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/util\/v1\/eth\/transfer": {
      "post": {
        "parameters": [
          {
            "name": "transfer",
            "in": "body",
            "description": null,
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/EthTransfer"
            }
          }
        ],
        "operationId": "transferEth",
        "summary": "Send ETH \/ Ropsten ETH from account to account",
        "description": "Send ETH \/ Ropsten ETH from account to account. This will create Tatum internal withdrawal request with ID. If every system works as expected, withdrawal request is marked as complete and transaction id is assigned to it.<ul><li>If Ethereum server connection is unavailable, withdrawal request is cancelled.</li><li>If blockchain transfer is successful, but is it not possible to reach Tatum Blockchain API, transaction id of blockchain transaction is returned and withdrawal request must be completed manually, otherwise all other withdrawals will be pending.</li></ul></p>",
        "tags": [
          "Ethereum blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "txHash of successful transaction",
            "schema": {
              "$ref": "#\/definitions\/TxHash"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ]
      }
    },
    "\/util\/v1\/eth\/erc20\/deploy": {
      "post": {
        "parameters": [
          {
            "name": "erc20deploy",
            "in": "body",
            "description": null,
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/Erc20Deploy"
            }
          }
        ],
        "operationId": "deployErc20",
        "summary": "Deploy ETH \/ Ropsten ETH ERC20 Smart Contract.",
        "description": "<p>Deploy ETH \/ Ropsten ETH ERC20 Smart Contract. Response could take quite a lot of time, average time of creation is 3-4 minutes. After deploying contract to blockchain, contract address will become available and must be stored within Tatum, otherwise it will not be possible to interact with it.</p>",
        "tags": [
          "Ethereum blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "information about ERC20 smart contract",
            "schema": {
              "$ref": "#\/definitions\/Erc20Token"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ]
      }
    },
    "\/util\/v1\/eth\/erc20\/transfer": {
      "post": {
        "parameters": [
          {
            "name": "erc20",
            "in": "body",
            "description": null,
            "required": true,
            "schema": {
              "$ref": "#\/definitions\/Erc20Transfer"
            }
          }
        ],
        "operationId": "transferErc20",
        "summary": "Transfer ETH \/ Ropsten ETH ERC20",
        "description": "<p>Transfer ETH \/ Ropsten ETH ERC20 Smart Contract Tokens from account to account. This will create Tatum internal withdrawal request with ID. If every system works as expected, withdrawal request is marked as complete and transaction id is assigned to it.<ul><li>If Ethereum server connection is unavailable, withdrawal request is cancelled.</li><li>If blockchain transfer is successful, but is it not possible to reach Tatum Blockchain API, transaction id of blockchain transaction is returned and withdrawal request must be completed manually, otherwise all other withdrawals will be pending.</li></ul></p>",
        "tags": [
          "Ethereum blockchain helper Endpoint"
        ],
        "responses": {
          "200": {
            "description": "txHash of successful transaction",
            "schema": {
              "$ref": "#\/definitions\/TxHash"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        },
        "security": [
          {
            "apiKey": [
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "apiKey": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header",
      "description": "JWT token generated from `apiKey` field of your API Key and current timestamp signed by `secret` of your API Key passed as Bearer token in authorization header, e.g. `authorization: Bearer 12kjn128n123n12i3n`.<br/>`{\"apiKey\": \"your_api_key\", \"created\": current_timestamp_millis}`<br/>How to create valid **JWT** can be found at <a href=\"https://jwt.io\">https://jwt.io</a>, or you can use our JWT helper Endpoint."
    }
  },
  "definitions": {
    "AccountBalance": {
      "type": "object",
      "properties": {
        "accountBalance": {
          "type": "number",
          "description": "Account balance represents all assets on the account, available and blocked."
        },
        "availableBalance": {
          "type": "number",
          "description": "Available balance on the account represents account balance minus blocked amount on the account. If the account is frozen or customer is disabled, the available balance will be 0. Available balance should be user do determine how much can customer send or withdraw from the account."
        }
      },
      "title": "AccountBalance"
    },
    "Account": {
      "type": "object",
      "properties": {
        "balance": {
          "$ref": "#\/definitions\/AccountBalance"
        },
        "created": {
          "type": "integer",
          "format": "int64",
          "example": 1546410660486,
          "description": "Time in UTC millis of account creation."
        },
        "currency": {
          "type": "string",
          "example": "BTC",
          "description": "Account currency.",
          "enum": [
            "BTC",
            "ETH",
            "TBTC",
            "TETH",
            "XRP",
            "TXRP",
            "VC_<VIRTUAL_CURRENCY>",
            "<ERC20_CURRENCY>"
          ]
        },
        "frozen": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether account is frozen or not."
        },
        "publicId": {
          "type": "string",
          "example": "7c21ed165e294db78b95f0f181086d6f",
          "description": "Account ID."
        }
      },
      "title": "Account"
    },
    "Address": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "example": "7c21ed165e294db78b95f0f181086d6f",
          "description": "Blockchain address."
        },
        "derivationKey": {
          "type": "integer",
          "format": "int32",
          "example": "7c21ed165e294db78b95f0f181086d6f",
          "description": "Derivation key index for given address."
        },
        "xpub": {
          "type": "string",
          "description": "Extended public key to derive address from. In case of XRP, this is account address, since address is defined as DestinationTag, which is address field."
        }
      },
      "title": "Address"
    },
    "ApiKey": {
      "type": "object",
      "properties": {
        "apiKey": {
          "type": "string",
          "example": "7c21ed165e294db78b95f0f181086d6f",
          "description": "API key."
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "ID of API key."
        },
        "name": {
          "type": "string",
          "example": "My Admin Write key.",
          "description": "Name of API key."
        },
        "readAccess": {
          "type": "boolean",
          "description": "Whether this API key has read access. Should be true always for correct behavior."
        },
        "secret": {
          "type": "string",
          "example": "123123aksjfn2q8onfkan823f",
          "description": "API key secret."
        },
        "writeAccess": {
          "type": "boolean",
          "description": "Whether this API key has write access."
        }
      },
      "title": "ApiKey"
    },
    "BlockAmount": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "Amount to be blocked on account."
        }
      },
      "title": "BlockAmount"
    },
    "CreateAccount": {
      "type": "object",
      "properties": {
        "compliant": {
          "type": "boolean",
          "example": false,
          "description": "Enable compliant checks. If this is enabled, it is impossible to create account if compliant check fails."
        },
        "currency": {
          "type": "string",
          "example": "BTC",
          "description": "Account currency",
          "enum": [
            "BTC",
            "ETH",
            "TBTC",
            "TETH",
            "XRP",
            "TXRP",
            "VC_<VIRTUAL_CURRENCY>",
            "<ERC20_CURRENCY>"
          ]
        },
        "customerId": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Internal customer ID"
        }
      },
      "title": "CreateAccount"
    },
    "Customer": {
      "type": "object",
      "properties": {
        "customerCountry": {
          "type": "string",
          "example": "US",
          "description": "Country customer has to be compliant with"
        },
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether customer is enabled or not"
        },
        "externalId": {
          "type": "string",
          "example": 651234,
          "description": "Customer external ID"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Internal customer ID"
        },
        "providerCountry": {
          "type": "string",
          "example": "US",
          "description": "Country service provider has to be compliant with"
        }
      },
      "title": "Customer"
    },
    "CustomerRegistration": {
      "type": "object",
      "properties": {
        "customerCountry": {
          "type": "string",
          "example": "US",
          "description": "Country customer has to be compliant with",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "externalId": {
          "type": "string",
          "example": 123654,
          "description": "Customer external ID. Use only anonymized identification you have in your system.",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "providerCountry": {
          "type": "string",
          "example": "US",
          "description": "Country service provider has to be compliant with",
          "minLength": 1,
          "maxLength": 2147483647
        }
      },
      "title": "CustomerRegistration"
    },
    "CustomerUpdate": {
      "type": "object",
      "properties": {
        "customerCountry": {
          "type": "string",
          "example": "US",
          "description": "Country customer has to be compliant with. If empty, it will not be updated."
        },
        "externalId": {
          "type": "string",
          "example": 123654,
          "description": "External customer ID. If empty, it will not be updated."
        },
        "providerCountry": {
          "type": "string",
          "example": "US",
          "description": "Country service provider has to be compliant with. If empty, it will not be updated."
        }
      },
      "title": "CustomerUpdate"
    },
    "Erc20": {
      "type": "object",
      "properties": {
        "basePair": {
          "type": "string",
          "example": "BTC",
          "description": "Base pair for ERC20 token. Transaction value will be calculated according to this base pair.",
          "enum": [
            "BTC",
            "ETH",
            "USD",
            "CZK",
            "EUR"
          ]
        },
        "chain": {
          "type": "string",
          "example": "TETH",
          "description": "Chain for ERC20 token. Ethereum mainnet or Ropsten testnet are available.",
          "enum": [
            "ETH",
            "TETH"
          ]
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "Derivation index for xpub to generate concrete deposit address."
        },
        "name": {
          "type": "string",
          "example": "VIRTUAL",
          "description": "ERC20 token name.",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "supply": {
          "type": "number",
          "example": 1000000,
          "description": "Supply of ERC20 token.",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "symbol": {
          "type": "string",
          "example": "VIRTUAL",
          "description": "ERC20 token symbol.",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "xpub": {
          "type": "string",
          "description": "Extended public key (xpub), from which deposit ERC20 address will be generated.",
          "minLength": 1,
          "maxLength": 2147483647
        }
      },
      "title": "Erc20"
    },
    "Erc20Response": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "Account ID with type of currency like created ERC20 token symbol. Supply of ERC20 token will be credited as soon as ERC20 token is sent to Ethereum blockchain."
        },
        "data": {
          "type": "string",
          "description": "ERC20 token to be send as a Ethereum transaction payload."
        },
        "gasLimit": {
          "type": "number",
          "example": 18976523,
          "description": "Estimated gas limit for creating ERC20 token."
        },
        "gasPrice": {
          "type": "number",
          "example": 1,
          "description": "Gas price for creating ERC20 token."
        }
      },
      "title": "Erc20Response"
    },
    "MarketValue": {
      "type": "object",
      "properties": {
        "date": {
          "type": "integer",
          "format": "int64",
          "example": 1546411001267,
          "description": "Date of validity of rate."
        },
        "pair": {
          "type": "string",
          "example": "BTC",
          "description": "Base pair.",
          "enum": [
            "BTC",
            "ETH",
            "USD",
            "CZK",
            "EUR"
          ]
        },
        "source": {
          "type": "string",
          "example": "CMC, https:\/\/coinmarketcap.com",
          "description": "Source of base pair."
        },
        "value": {
          "type": "number",
          "example": 1235.56,
          "description": "Value of transaction in given base pair."
        }
      },
      "title": "MarketValue"
    },
    "Payment": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "Amount to be sent",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "anonymous": {
          "type": "boolean",
          "example": false,
          "description": "Anonymous payment does not show sender account to recipient, default is false"
        },
        "compliant": {
          "type": "boolean",
          "example": false,
          "description": "Enable compliant checks. Payment will not be processed, if compliant check fails."
        },
        "paymentId": {
          "type": "string",
          "example": 9625,
          "description": "Payment ID, External identifier of the payment, which can be used to pair payments within Tatum accounts."
        },
        "recipientAccountId": {
          "type": "string",
          "example": "7c69db525e294db78b95f0f181124d6f",
          "description": "Internal recipient account ID within Tatum platform",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "recipientNote": {
          "type": "string",
          "example": "Private note",
          "description": "Note visible to both, sender and recipient"
        },
        "senderAccountId": {
          "type": "string",
          "example": "7c21ed165e294db78b95f0f181086d6f",
          "description": "Internal sender account ID within Tatum platform",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "senderNote": {
          "type": "string",
          "example": "Sender note",
          "description": "Note visible to sender"
        }
      },
      "title": "Payment"
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "example": "7c69db525e294db78b95f0f181124d6f",
          "description": "Source account - source of transaction(s)"
        },
        "amount": {
          "type": "number",
          "example": 0.1,
          "description": "Amount in account's currency"
        },
        "anonymous": {
          "type": "boolean",
          "example": false,
          "description": "Whether payment is anonymous. If true, counter account owner does not see source account."
        },
        "counterAccount": {
          "type": "string",
          "example": "7c21ed165e294db78b95f0f181086d6f",
          "description": "Counter account - transaction(s) destination account"
        },
        "currency": {
          "type": "string",
          "example": "BTC",
          "description": "Payment currency"
        },
        "date": {
          "type": "integer",
          "format": "int64",
          "example": 1546411001267,
          "description": "Payment datetime in UTC millis"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 9876812,
          "description": "Internal payment ID"
        },
        "marketValues": {
          "type": "array",
          "description": "List of market values of given transaction with all supported base pairs.",
          "items": {
            "$ref": "#\/definitions\/MarketValue"
          }
        },
        "operationType": {
          "type": "string",
          "example": "PAYMENT",
          "description": "Type of operation",
          "enum": [
            "PAYMENT",
            "WITHDRAWAL",
            "FAILED",
            "DEPOSIT"
          ]
        },
        "paymentId": {
          "type": "string",
          "example": 65426,
          "description": "Payment ID defined in payment order by sender"
        },
        "recipientNote": {
          "type": "string",
          "example": "Private note",
          "description": "Note visible for both sender and recipient"
        },
        "reference": {
          "type": "string",
          "example": 1561683216,
          "description": "Payment internal reference - unique identifier within Tatum ledger. In order of failure, use this value to search for problems."
        },
        "senderNote": {
          "type": "string",
          "example": "Sender note",
          "description": "Note visible for sender"
        },
        "transactionType": {
          "type": "string",
          "example": "CREDIT_PAYMENT",
          "description": "Type of payment",
          "enum": [
            "FAILED",
            "DEBIT_PAYMENT",
            "CREDIT_PAYMENT",
            "CREDIT_DEPOSIT",
            "DEBIT_WITHDRAWAL",
            "CANCEL_WITHDRAWAL"
          ]
        }
      },
      "title": "Transaction"
    },
    "TransactionFilter": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "example": "7c69db525e294db78b95f0f181124d6f",
          "description": "Source account - source of transaction(s)"
        },
        "counterAccount": {
          "type": "string",
          "example": "7c21ed165e294db78b95f0f181086d6f",
          "description": "Counter account - transaction(s) destination account"
        },
        "from": {
          "type": "string",
          "format": "date",
          "example": 1546411085054,
          "description": "Starting date to search for payments from, default NULL means search all history"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 500,
          "description": "Maximum number of payments in the result, default 500",
          "minimum": 1,
          "maximum": 2000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "opType": {
          "type": "string",
          "example": "PAYMENT",
          "description": "Type of operation",
          "enum": [
            "PAYMENT",
            "WITHDRAWAL",
            "FAILED",
            "DEPOSIT"
          ]
        },
        "paymentId": {
          "type": "string",
          "example": 65426,
          "description": "Payment ID defined in payment order by sender"
        },
        "to": {
          "type": "string",
          "format": "date",
          "example": 1546416085054,
          "description": "Date until to search for payments, default NULL means search until now"
        }
      },
      "title": "TransactionFilter"
    },
    "VirtualCurrency": {
      "type": "object",
      "properties": {
        "basePair": {
          "type": "string",
          "example": "BTC",
          "description": "Base pair for virtual currency. Transaction value will be calculated according to this base pair.",
          "enum": [
            "BTC",
            "ETH",
            "USD",
            "CZK",
            "EUR"
          ]
        },
        "erc20": {
          "type": "boolean",
          "description": "If it is ERC20 token on Ethereum blockchain or virtual currency of Tatum platform."
        },
        "name": {
          "type": "string",
          "example": "VIRTUAL",
          "description": "Virtual currency name. Must be prefixed with 'VC_'.",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "supply": {
          "type": "number",
          "example": 1000000,
          "description": "Supply of virtual currency.",
          "minimum": 0,
          "exclusiveMinimum": false
        }
      },
      "title": "VirtualCurrency"
    },
    "VirtualCurrencyOperation": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "example": "7c21ed165e294db78b95f0f181086d6f",
          "description": "Virtual currency account.",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "amount": {
          "type": "number",
          "description": "Amount of virtual currency to operate within this operation.",
          "minimum": 0,
          "exclusiveMinimum": false
        }
      },
      "title": "VirtualCurrencyOperation"
    },
    "BroadcastResponse": {
      "type": "string",
      "description": "Transaction ID of broadcast transaction",
      "example": "62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D"
    },
    "Broadcast": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "example": "BTC",
          "description": "Currency of signed transaction to be broadcast",
          "enum": [
            "BTC",
            "ETH",
            "TBTC",
            "TETH",
            "XRP",
            "TXRP",
            "<ERC20_CURRENCY>"
          ]
        },
        "testnet": {
          "type": "boolean",
          "example": false,
          "description": "Whether we use testnet or mainnet chain."
        },
        "withdrawalId": {
          "type": "integer",
          "example": "12345",
          "description": "Withdrawal ID to be completed by transaction broadcast",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "txData": {
          "type": "string",
          "example": "62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D",
          "description": "Raw signed transaction to be published to network.",
          "minLength": 1,
          "maxLength": 65535
        }
      },
      "title": "Broadcast"
    },
    "Withdrawal": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "example": 0.001,
          "description": "Amount to be withdrawn to blockchain."
        },
        "currency": {
          "type": "string",
          "example": "BTC",
          "description": "Withdrawal currency",
          "enum": [
            "BTC",
            "ETH",
            "TBTC",
            "TETH",
            "XRP",
            "TXRP",
            "<ERC20_CURRENCY>"
          ]
        },
        "fee": {
          "type": "number",
          "example": 0.0005,
          "description": "Fee to be submitted as a transaction fee to blockchain. If not present, it is set automatically to 0.0005 for BTC."
        },
        "force": {
          "type": "boolean",
          "example": false,
          "description": "Force withdrawal, even if it is non-compliant"
        },
        "senderAccountId": {
          "type": "string",
          "example": "7c21ed165e294db78b95f0f181086d6f",
          "description": "Sender account ID",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "senderNote": {
          "type": "string",
          "example": "Sender note",
          "description": "Note visible to owner of withdrawing account"
        },
        "sourceAddress": {
          "type": "string",
          "example": "mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7",
          "description": "Blockchain address to send assets from. Used only for ETH-based accounts. See <a href=\"#tatum-middleware-api-ethereum-blockchain-helper-endpoint\">Ethereum blockchain helper Endpoint</a>."
        },
        "targetAddress": {
          "type": "string",
          "example": "mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7",
          "description": "Blockchain address to send assets"
        }
      },
      "title": "Withdrawal"
    },
    "WithdrawalHint": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "description": "Addresses, from which withdrawal can be processed.",
          "items": {
            "$ref": "#\/definitions\/Address"
          }
        },
        "amounts": {
          "type": "array",
          "description": "Balance for each address.",
          "items": {
            "type": "number"
          }
        }
      },
      "title": "WithdrawalHint"
    },
    "WithdrawalResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "description": "Addresses, from which withdrawal will be processed.",
          "items": {
            "$ref": "#\/definitions\/Address"
          }
        },
        "amounts": {
          "type": "array",
          "description": "Amounts for each of unprocessed transaction outputs, that can be used for withdrawal.",
          "items": {
            "type": "number"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 5432,
          "description": "ID of withdrawal"
        },
        "vin": {
          "type": "array",
          "description": "Last used unprocessed transaction outputs, that can be used.",
          "items": {
            "type": "string"
          }
        },
        "vinIndex": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "title": "WithdrawalResponse"
    },
    "WalletGenerateBtc": {
      "required": null,
      "properties": {
        "chain": {
          "type": "string",
          "description": "Chain to generate address.",
          "example": "BTC",
          "enum": [
            "BTC",
            "TBTC"
          ]
        }
      }
    },
    "GeneratedAddress": {
      "required": null,
      "properties": {
        "address": {
          "type": "string",
          "description": "Generated address.",
          "example": "mtQygZAEbmgBCPJNMYRjGxa4C3kgTNdmXM"
        }
      }
    },
    "PrivKey": {
      "required": null,
      "properties": {
        "key": {
          "type": "string",
          "description": "Generated private key.",
          "example": "cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ"
        }
      }
    },
    "TxHash": {
      "required": null,
      "properties": {
        "txHash": {
          "type": "string",
          "description": "txHash of successful transaction.",
          "example": "c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"
        }
      }
    },
    "XPrivBtc": {
      "required": [
        "chain",
        "mnemonic",
        "index"
      ],
      "properties": {
        "chain": {
          "type": "string",
          "description": "chain - BTC for Mainnet or TBTC for Testnet3",
          "example": "BTC",
          "enum": [
            "BTC",
            "TBTC"
          ]
        },
        "mnemonic": {
          "type": "string",
          "description": "mnemonic to generate private key from",
          "example": "urge pulp usage sister evidence arrest palm math please chief egg abuse"
        },
        "index": {
          "type": "integer",
          "description": "derivation index of private key",
          "example": 4
        }
      }
    },
    "WithdrawalBtc": {
      "required": [
        "senderAccountId",
        "targetAddress",
        "currency",
        "amount",
        "mnemonic"
      ],
      "properties": {
        "senderAccountId": {
          "type": "string",
          "description": "Sender account ID",
          "example": "7c21ed165e294db78b95f0f181086d6f"
        },
        "targetAddress": {
          "type": "string",
          "description": "Blockchain address to send assets",
          "example": "mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"
        },
        "currency": {
          "type": "string",
          "description": "Withdrawal currency",
          "enum": [
            "BTC",
            "TBTC"
          ],
          "example": "TBTC"
        },
        "amount": {
          "type": "number",
          "description": "Amount to be sent in btc",
          "minimum": 0,
          "exclusiveMinimum": false,
          "example": "0.02"
        },
        "senderNote": {
          "type": "string",
          "description": "Note visible to owner of withdrawing account",
          "example": "Sender note"
        },
        "force": {
          "type": "boolean",
          "description": "Force withdrawal, even if it is non-compliant",
          "example": false
        },
        "mnemonic": {
          "type": "string",
          "description": "private key of address to send funds from",
          "example": "urge pulp usage sister evidence arrest palm math please chief egg abuse"
        }
      }
    },
    "XrpWallet": {
      "required": null,
      "properties": {
        "secret": {
          "type": "string",
          "description": "generated secret for account",
          "example": "snSFTHdvSYQKKkYntvEt8cnmZuPJB"
        },
        "address": {
          "type": "string",
          "description": "generated account address",
          "example": "rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV"
        }
      }
    },
    "Wallet": {
      "required": null,
      "properties": {
        "mnemonic": {
          "type": "string",
          "description": "generated mnemonic for wallet",
          "example": "urge pulp usage sister evidence arrest palm math please chief egg abuse"
        },
        "xpriv": {
          "type": "string",
          "description": "generated xpriv for wallet with derivation path according to BIP44",
          "example": "xprvA1srLWNaGEkhdSJg6cLTMAziUpQcefpu2ZnKH2PXGiXEPKTdVPHjLFp4aZSSqSsaLMNrWXoj6TsyyUqh18T1hbiQkC42aWjXB9HnpmmqrYr"
        },
        "xpub": {
          "type": "string",
          "description": "generated xpub for wallet with derivation path according to BIP44",
          "example": "xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"
        }
      }
    },
    "WalletGenerateEth": {
      "required": null,
      "properties": {
        "chain": {
          "type": "string",
          "description": "chain - 'mainnet' or 'ropsten'",
          "example": "ropsten",
          "enum": [
            "mainnet",
            "ropsten"
          ]
        }
      }
    },
    "Erc20Token": {
      "required": null,
      "properties": {
        "tx": {
          "type": "string",
          "description": "tx hash of deployment of smart contract",
          "example": "0x93feef50a0754d5b815964ec41a744b8b60fd83bac7657386b21cd8a7c38a3b1"
        },
        "contractAddress": {
          "type": "string",
          "description": "address of generated smart contract",
          "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
        }
      }
    },
    "XPrivEth": {
      "required": [
        "chain",
        "mnemonic",
        "index"
      ],
      "properties": {
        "chain": {
          "type": "string",
          "description": "chain - 'mainnet' or 'ropsten'",
          "example": "ropsten",
          "enum": [
            "mainnet",
            "ropsten"
          ]
        },
        "mnemonic": {
          "type": "string",
          "description": "mnemonic to generate private key from",
          "example": "urge pulp usage sister evidence arrest palm math please chief egg abuse"
        },
        "index": {
          "type": "integer",
          "description": "derivation index of private key",
          "example": 0
        }
      }
    },
    "EthTransfer": {
      "required": [
        "chain",
        "mnemonic",
        "index",
        "senderAccountId",
        "targetAddress",
        "amount"
      ],
      "properties": {
        "chain": {
          "type": "string",
          "description": "chain - 'mainnet' or 'ropsten'",
          "example": "ropsten",
          "enum": [
            "mainnet",
            "ropsten"
          ]
        },
        "mnemonic": {
          "type": "string",
          "description": "mnemonic to generate private key of sender",
          "example": "urge pulp usage sister evidence arrest palm math please chief egg abuse"
        },
        "index": {
          "type": "integer",
          "description": "derivation index of sender address of sender",
          "example": 0
        },
        "senderAccountId": {
          "type": "string",
          "description": "Sender account ID",
          "example": "7c21ed165e294db78b95f0f181086d6f"
        },
        "targetAddress": {
          "type": "string",
          "description": "Blockchain address to send assets",
          "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
        },
        "amount": {
          "type": "integer",
          "description": "Amount to be sent in wei",
          "minimum": 0,
          "exclusiveMinimum": false,
          "example": 100000
        },
        "senderNote": {
          "type": "string",
          "description": "Note visible to owner of withdrawing account",
          "example": "Sender note"
        },
        "force": {
          "type": "boolean",
          "description": "Force payment, even if it is non-compliant",
          "example": false
        }
      }
    },
    "XrpTransfer": {
      "required": [
        "chain",
        "account",
        "secret",
        "senderAccountId",
        "targetAddress",
        "amount"
      ],
      "properties": {
        "chain": {
          "type": "string",
          "description": "chain - 'XRP' or 'TXRP'",
          "example": "XRP",
          "enum": [
            "XRP",
            "TXRP"
          ]
        },
        "account": {
          "type": "string",
          "description": "XRP account address. Must be the one used for generating deposit tags.",
          "example": "rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV"
        },
        "secret": {
          "type": "string",
          "description": "Secret for account",
          "example": "snSFTHdvSYQKKkYntvEt8cnmZuPJB"
        },
        "senderAccountId": {
          "type": "string",
          "description": "Sender account ID",
          "example": "35ab5ea8e48c4b179cadea653c6d732e"
        },
        "targetAddress": {
          "type": "string",
          "description": "Blockchain address to send assets",
          "example": "rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV"
        },
        "destinationTag": {
          "type": "integer",
          "description": "Destination tag of recipient account, if any.",
          "example": 12355
        },
        "amount": {
          "type": "integer",
          "description": "Amount to be sent, in XRP.",
          "example": 10000,
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "senderNote": {
          "type": "string",
          "description": "Note visible to owner of withdrawing account.",
          "example": "Sender note"
        },
        "force": {
          "type": "boolean",
          "description": "Force payment, even if it is non-compliant.",
          "example": false
        }
      }
    },
    "Erc20Transfer": {
      "required": [
        "mnemonic",
        "index",
        "senderAccountId",
        "targetAddress",
        "currency",
        "amount",
        "tokenAddress"
      ],
      "properties": {
        "mnemonic": {
          "type": "string",
          "description": "mnemonic to generate private key of holder of ERC20 token",
          "example": "urge pulp usage sister evidence arrest palm math please chief egg abuse"
        },
        "index": {
          "type": "integer",
          "description": "derivation index of sender address of holder of ERC20 token",
          "example": 0
        },
        "senderAccountId": {
          "type": "string",
          "description": "Sender account ID",
          "example": "7c21ed165e294db78b95f0f181086d6f"
        },
        "targetAddress": {
          "type": "string",
          "description": "Blockchain address to send ERC20 token to",
          "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
        },
        "currency": {
          "type": "string",
          "description": "ERC20 symbol",
          "example": "MY_SYMBOL"
        },
        "amount": {
          "type": "integer",
          "description": "Amount to be sent in wei",
          "example": 100000
        },
        "senderNote": {
          "type": "string",
          "description": "Note visible to owner of withdrawing account",
          "example": "Sender note"
        },
        "force": {
          "type": "boolean",
          "description": "Force payment, even if it is non-compliant",
          "example": false
        },
        "tokenAddress": {
          "type": "string",
          "description": "address of ERC20 token",
          "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
        }
      }
    },
    "Erc20Deploy": {
      "required": [
        "chain",
        "mnemonic",
        "index",
        "payIndex",
        "customerId",
        "name",
        "symbol",
        "supply",
        "basePair"
      ],
      "properties": {
        "chain": {
          "type": "string",
          "description": "chain - 'mainnet' or 'ropsten'",
          "example": "ropsten",
          "enum": [
            "mainnet",
            "ropsten"
          ]
        },
        "mnemonic": {
          "type": "string",
          "description": "mnemonic to generate private key of deployer of ERC20",
          "example": "urge pulp usage sister evidence arrest palm math please chief egg abuse"
        },
        "index": {
          "type": "integer",
          "description": "derivation index of deployer address of ERC20",
          "example": 0
        },
        "payIndex": {
          "type": "integer",
          "description": "derivation index of address to pay for deployment of ERC20",
          "example": 0
        },
        "customerId": {
          "type": "integer",
          "description": "ID of customer to create ERC20 for",
          "example": 5
        },
        "name": {
          "type": "string",
          "description": "name of the ERC20 token",
          "example": "My ERC20 Token"
        },
        "symbol": {
          "type": "string",
          "description": "symbol of the ERC20 token",
          "example": "MT"
        },
        "supply": {
          "type": "integer",
          "description": "max supply of ERC20 token",
          "example": 10000000
        },
        "basePair": {
          "type": "string",
          "description": "Base pair for ERC20 token. 1 token will be equal to 1 unit of base pair. Transaction value will be calculated according to this base pair.",
          "enum": [
            "BTC",
            "ETH",
            "USD",
            "CZK",
            "EUR"
          ]
        }
      }
    },
    "Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "field": {
          "type": "string",
          "description": "Define field in request object, if any, which fails validation or raises error.",
          "example": "payment.senderAccountId"
        },
        "code": {
          "type": "string",
          "description": "Unique error code which identifies error.",
          "example": "payment.amount.notNull"
        },
        "message": {
          "type": "string",
          "description": "Description of the error.",
          "example": "Payment amount must be greater than 0."
        },
        "id": {
          "type": "number",
          "description": "Optional id of failed request object, e.g. id of withdrawal from Tatum ledger in case of failure.",
          "example": 1
        },
        "txId": {
          "type": "string",
          "description": "Optional transaction id of blockchain transaction in case of failure."
        },
        "data": {
          "type": "object",
          "description": "Additional data specific to blockchain or error code."
        }
      }
    }
  },
  "produces": [
    "application\/json"
  ],
  "consumes": [
    "application\/json"
  ]
}
